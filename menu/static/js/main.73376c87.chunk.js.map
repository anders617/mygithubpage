{"version":3,"sources":["api/mdiningservice.js","components/Heart/Heart.jsx","components/Menu/Category.jsx","components/Menu/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["MDiningPromiseClient","Heart","props","state","count","this","fetchHearts","food","req","HeartsRequest","addKeys","mdiningclient","getHearts","then","res","updateCount","catch","err","console","log","addHeart","oldProps","heartsReply","getCountsList","forEach","getKey","setState","getCount","icon","type","theme","style","color","fontSize","lineHeight","paddingTop","overflowCount","offset","Math","floor","log10","size","shape","ghost","padding","margin","onClick","React","Component","Category","category","marginTop","fontWeight","getName","boxShadow","borderRadius","bodyStyle","itemLayout","dataSource","getMenuitemList","split","renderItem","item","Item","Meta","description","display","getAttributeList","reduce","a","b","getAllergensList","toLowerCase","Menu","diningHalls","menus","selectedCampus","selectedDiningHall","selectedDate","moment","selectedMenu","loading","menuCache","getDiningHalls","DiningHallsRequest","diningHallList","getDininghallsList","bursleyIdx","findIndex","diningHall","fetchMenu","error","menu","dayEvent","length","getDayeventsList","find","day","hours","getCalendareventList","event","getEventtitle","getMeal","getHoursOfMenu","getEventtimestart","getEventtimeend","now","isSame","withCategories","map","idx","filter","getHascategories","getEndTimeOfMenu","isSameOrAfter","sort","aHours","bHours","isAfter","diff","cacheKey","format","hasOwnProperty","firstMenuWithCategories","MenuRequest","setDate","setDininghall","setMeal","getMenu","getMenusList","diningHallIndex","getCampus","getCategoryList","key","getDescription","campusOptions","Array","from","Set","localeCompare","campus","Button","value","options","entry","minWidth","startTime","endTime","timeDescriptionRelative","startTimeDescription","endTimeDescription","isBetween","clone","subtract","add","isBefore","fromNow","mealOptions","meal","getStartTimeOfMenu","className","justify","span","Group","maxWidth","buttonStyle","onChange","e","onChangeCampus","target","onChangeDate","allowClear","onChangeDiningHall","indicator","spin","spinning","renderCategories","Header","Layout","Footer","Content","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73376c87.chunk.js","sourcesContent":["import { MDiningPromiseClient } from 'mdining-proto';\nexport default new MDiningPromiseClient('https://michigan-dining-api.herokuapp.com');\n","import React from \"react\";\nimport { Icon, Badge, Button } from \"antd\";\n\nimport mdiningclient from '../../api/mdiningservice';\nimport { HeartsRequest } from 'mdining-proto';\n\nclass Heart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n\n    componentDidMount() {\n        this.fetchHearts();\n    }\n\n    fetchHearts() {\n        const { food } = this.props;\n        const req = new HeartsRequest();\n        req.addKeys(food);\n        mdiningclient.getHearts(req)\n            .then((res) => this.updateCount(res))\n            .catch((err) => console.log(err));\n    }\n\n    addHeart() {\n        const { food } = this.props;\n        const req = new HeartsRequest();\n        req.addKeys(food);\n        mdiningclient.addHeart(req)\n            .then((res) => this.updateCount(res))\n            .catch((err) => console.log(err));\n    }\n\n    componentDidUpdate(oldProps) {\n        if (this.props.food !== oldProps.food) {\n            this.fetchHearts();\n        }\n    }\n\n    updateCount(heartsReply) {\n        const { food } = this.props;\n        heartsReply.getCountsList().forEach((count) => {\n            if (count.getKey() === food) {\n                this.setState({ count: count.getCount() });\n            }\n        });\n    }\n\n    render() {\n        const { count } = this.state;\n        const icon = (\n            <Icon\n                type=\"heart\"\n                theme=\"filled\"\n                style={{\n                    color: \"red\",\n                    fontSize: \"26px\",\n                    lineHeight: \"26px\",\n                    paddingTop: \"4px\"\n                }}\n            />\n        );\n        return (\n            <Badge\n                count={count}\n                overflowCount={99999999}\n                offset={[-5 + 3.5 * Math.floor(Math.log10(count)), 5]}\n            >\n                <Button\n                    size=\"large\"\n                    shape=\"circle\"\n                    type=\"danger\"\n                    ghost\n                    style={{ padding: '0px', margin: '5px', paddingTop: '1px' }}\n                    onClick={() => this.addHeart()}\n                >\n                    {icon}\n                </Button>\n            </Badge>\n        );\n    }\n}\n\nexport default Heart;\n","import React from 'react';\nimport {Card, List } from 'antd';\nimport Heart from '../Heart/Heart';\n\nconst Category = ({category}) => {\n    return (\n        <div>\n            <h2 style={{fontSize: '12pt', margin: '2px', marginTop: '10px', fontWeight: 600}}>{category.getName()}</h2>\n            <Card \n                style={{boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px'}}\n                bodyStyle={{padding: '10px'}}\n            >\n            <List \n                itemLayout=\"horizontal\"\n                dataSource={category.getMenuitemList()}\n                size=\"small\"\n                split={false}\n                renderItem={(item) => (\n                    <List.Item style={{padding: '0px'}}>\n                        <List.Item.Meta\n                            style={{padding: '0px'}}\n                            description={(\n                                <div>\n                                <h4 style={{padding: '0px', margin: '0px'}}>{item.getName()}</h4>\n                                <p style={{margin: '0px', padding: '0px', display: 'block'}}>\n                                    <i>{item.getAttributeList().reduce((a, b) => `${a} ${b}`, '')} - </i>\n                                    <i>{item.getAllergensList().reduce((a, b) => `${a} ${b}`, '')}</i>\n                                </p>\n                                </div>\n                            )}\n                        />\n                        <Heart food={item.getName().toLowerCase()} />\n                    </List.Item>\n                )}\n            />\n            </Card>\n        </div>\n    )\n}\n\nexport default Category;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { BrowserView, MobileView, } from \"react-device-detect\";\nimport { Row, Col, Card, Spin, Icon, DatePicker, Radio } from 'antd';\nimport mdiningclient from '../../api/mdiningservice';\nimport { DiningHallsRequest, MenuRequest } from 'mdining-proto';\nimport Category from './Category';\n\nconst dateFormat = 'YYYY-MM-DD';\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diningHalls: [],\n            menus: [],\n            selectedCampus: 'DINING HALLS',\n            selectedDiningHall: 0,\n            selectedDate: moment(),\n            selectedMenu: 0,\n            loading: true,\n        };\n        this.menuCache = {};\n    }\n\n    componentDidMount() {\n        mdiningclient.getDiningHalls(new DiningHallsRequest())\n            .then((diningHalls) => {\n                const diningHallList = diningHalls.getDininghallsList();\n                const bursleyIdx = diningHallList.findIndex((diningHall) => diningHall.getName() === 'Bursley Dining Hall');\n                this.setState({ diningHalls: diningHallList, selectedDiningHall: bursleyIdx }, () => this.fetchMenu());\n            })\n            .catch((error) => console.log(error));\n    }\n\n    getHoursOfMenu(menu) {\n        const { selectedDiningHall, selectedDate, diningHalls } = this.state;\n        const dayEvent = diningHalls.length === 0 ? null : diningHalls[selectedDiningHall].getDayeventsList().find((dayEvent) => moment(dayEvent.getKey()).day() === selectedDate.day());\n        const hours =  !dayEvent ? null : dayEvent.getCalendareventList().find((event) => event.getEventtitle().toLowerCase() === menu.getMeal().toLowerCase());\n        if (!hours) return null;\n        return hours;\n    }\n\n    getStartTimeOfMenu(menu) {\n        const hours = this.getHoursOfMenu(menu);\n        if (!hours) return null;\n        return moment(hours.getEventtimestart());\n    }\n\n    getEndTimeOfMenu(menu) {\n        const hours = this.getHoursOfMenu(menu);\n        if (!hours) return null;\n        return moment(hours.getEventtimeend());\n    }\n\n    firstMenuWithCategories(menus) {\n        const { selectedDate } = this.state;\n        const now = moment();\n        if (selectedDate.isSame(now, 'day')) {\n            const withCategories = menus\n                .map((menu, idx) => {return {idx, menu};})\n                .filter((item) => item.menu.getHascategories() && this.getEndTimeOfMenu(item.menu) && this.getEndTimeOfMenu(item.menu).isSameOrAfter(now));\n            if (withCategories.length === 0) return 0;\n            const closestMenuInTime = withCategories.sort((a, b) => {\n                const aHours = this.getHoursOfMenu(a.menu);\n                const bHours = this.getHoursOfMenu(b.menu);\n                if (now.isAfter(moment(aHours.getEventtimestart()))) {\n                    return -1;\n                } else if (now.isAfter(moment(bHours.getEventtimestart()))) {\n                    return 1;\n                }\n                return moment(aHours.getEventtimestart()).diff(now) - moment(bHours.getEventtimestart()).diff(now);\n            })[0];\n            return closestMenuInTime.idx;\n        }\n        const idx = menus.findIndex((menu) => menu.getHascategories());\n        if (idx === -1) return 0;\n        return idx;\n    }\n\n    fetchMenu() {\n        const { diningHalls, selectedCampus, selectedDiningHall, selectedDate } = this.state;\n        if (diningHalls.length === 0) return;\n        const cacheKey = selectedCampus + selectedDiningHall + selectedDate.format(dateFormat);\n        if (this.menuCache.hasOwnProperty(cacheKey)) {\n            const menus = this.menuCache[cacheKey];\n            this.setState({ menus, selectedMenu: this.firstMenuWithCategories(menus) });\n            return;\n        }\n        const req = new MenuRequest();\n        req.setDate(selectedDate.format(dateFormat));\n        req.setDininghall(diningHalls[selectedDiningHall].getName());\n        req.setMeal(null);\n        this.setState({ loading: true });\n        mdiningclient.getMenu(req)\n            .then((menu) => {\n                const menus = menu.getMenusList()\n                this.menuCache[cacheKey] = menus;\n                this.setState({ menus, selectedMenu: this.firstMenuWithCategories(menus), loading: false });\n            })\n            .catch((error) => console.log(error));\n    }\n\n    onChangeDate(selectedDate) {\n        this.setState({ selectedDate }, () => this.fetchMenu());\n    }\n\n    onChangeDiningHall(selectedDiningHall) {\n        this.setState({ selectedDiningHall }, () => this.fetchMenu());\n    }\n\n    onChangeCampus(selectedCampus) {\n        const { diningHalls } = this.state;\n        const diningHallIndex = diningHalls.findIndex((diningHall) => diningHall.getCampus() === selectedCampus);\n        this.setState({ selectedCampus, selectedDiningHall: diningHallIndex }, () => this.fetchMenu());\n    }\n\n    renderCategories() {\n        const { selectedMenu, menus } = this.state;\n        if (menus.length === 0) {\n            return (<b>There's no data for this date :(</b>)\n        }\n        const menu = menus[selectedMenu];\n        if (!menu.getHascategories()) {\n            return (<b>{menu.getDescription()}</b>)\n        }\n        return menu.getCategoryList().map((category) => (<Category key={category.getName()} category={category} />));\n    }\n\n    render() {\n        const { style } = this.props;\n        const { selectedCampus, selectedDiningHall, selectedDate, selectedMenu, diningHalls, menus, loading } = this.state;\n        const campusOptions = Array.from(new Set(diningHalls.map((diningHall) => diningHall.getCampus())))\n            .sort((a, b) => a.localeCompare(b))\n            .map((campus) => {\n                return (<Radio.Button key={campus} value={campus}>{campus}</Radio.Button>)\n            });\n        const options = diningHalls\n            .map((diningHall, idx) => { return { idx, diningHall }; })\n            .sort((a, b) => a.diningHall.getName().localeCompare(b.diningHall.getName()))\n            .filter((entry) => entry.diningHall.getCampus() === selectedCampus)\n            .map((entry) => {\n                return (\n                    <Radio.Button style={{ minWidth: 205 }} key={entry.idx} value={entry.idx}>{entry.diningHall.getName()}</Radio.Button>\n                );\n            });\n        const hours =  diningHalls.length === 0 || menus.length === 0 ? null : this.getHoursOfMenu(menus[selectedMenu]);\n        const startTime = hours ? moment(hours.getEventtimestart()) : moment();\n        const endTime = hours ? moment(hours.getEventtimeend()) : moment();\n\n        let timeDescriptionRelative = null;\n        const startTimeDescription = startTime.format('h:mma');\n        const endTimeDescription = endTime.format('h:mma');\n        if (moment().isBetween(startTime.clone().subtract(24, 'hours'), endTime.clone().add(24, 'hours'))) {\n            if (moment().isBefore(startTime)) {\n                timeDescriptionRelative = 'Opens ' + startTime.fromNow();\n            } else if (moment().isBefore(endTime)) {\n                timeDescriptionRelative = 'Closes ' + endTime.fromNow();\n            } else {\n                timeDescriptionRelative = 'Closed ' + endTime.fromNow() + ' :(';\n            }\n        }\n        const mealOptions = menus\n            .map((menu, idx) => { return { idx, meal: menu.getMeal(), startTime: this.getStartTimeOfMenu(menu) }; })\n            .sort((a, b) => {\n                if (a.startTime && b.startTime) {\n                    return a.startTime.isBefore(b.startTime) ? -1 : a.meal.localeCompare(b.meal);\n                }\n                if (a.startTime) {\n                    return -1;\n                }\n                if (b.startTime) {\n                    return 1;\n                }\n                return a.meal.localeCompare(b.meal);\n            })\n            .map((entry) => (<Radio.Button style={{ minWidth: 125 }} key={entry.idx} value={entry.idx}>{entry.meal}</Radio.Button>));\n        return (\n            <div className=\"Menu\" style={style}>\n                <Row type=\"flex\" justify=\"center\">\n                    <Col span={23}>\n                        <Card\n                            style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                            bodyStyle={{ padding: '10px' }}\n                        >\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedCampus}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeCampus(e.target.value)}\n                            >\n                                {campusOptions}\n                            </Radio.Group>\n                            <MobileView>\n                                <input\n                                    style={{ margin: '5px', fontSize: '16px' }}\n                                    type=\"date\"\n                                    value={selectedDate.format(dateFormat)}\n                                    onChange={(e) => this.onChangeDate(moment(e.target.value))}\n                                />\n                            </MobileView>\n                            <BrowserView style={{ display: 'inline-block' }}>\n                                <DatePicker\n                                    style={{ margin: '5px' }}\n                                    value={selectedDate}\n                                    onChange={(selectedDate) => this.onChangeDate(selectedDate)}\n                                    allowClear={false}\n                                />\n                            </BrowserView>\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedDiningHall}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeDiningHall(e.target.value)}\n                            >\n                                {options}\n                            </Radio.Group>\n                            <br />\n                            <Radio.Group\n                                style={{ maxWidth: 400, margin: '5px' }}\n                                value={selectedMenu}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.setState({ selectedMenu: e.target.value })}\n                            >\n                                {mealOptions}\n                            </Radio.Group>\n                        </Card>\n                    </Col>\n                </Row>\n                <br />\n                <Spin indicator={(<Icon type=\"loading\" style={{ fontSize: 24 }} spin />)} spinning={loading}>\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col span={23}>\n                            <Card\n                                style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                                bodyStyle={{ padding: '10px' }}\n                            >\n                                {hours ?\n                                    (<p>\n                                        {timeDescriptionRelative}\n                                        <br />\n                                        <i>Hours: {startTimeDescription} - {endTimeDescription}</i>\n                                    </p>)\n                                    : null}\n                                {this.renderCategories()}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Spin>\n            </div>\n        )\n    }\n}\n\nexport default Menu;\n","import React from 'react';\nimport './App.css';\nimport { Row, Col, Layout } from 'antd';\nimport Menu from './components/Menu/Menu';\n\nconst { Header, Footer, Content } = Layout;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout style={{backgroundColor: 'transparent'}}>\n        <Header style={{backgroundColor: 'transparent', fontSize: '18pt', fontWeight: 600}}>MDining Menus</Header>\n        <Content style={{backgroundColor: 'transparent'}}>\n          <Row type=\"flex\" justify=\"center\">\n            <Col>\n              <Menu style={{maxWidth: '700px'}}/>\n            </Col>\n          </Row>\n        </Content>\n        <Footer style={{backgroundColor: 'transparent'}}>&copy; 2019 Anders Boberg</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
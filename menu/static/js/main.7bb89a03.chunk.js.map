{"version":3,"sources":["api/mdiningservice.js","components/Heart/Heart.jsx","components/Menu/Category.jsx","components/Menu/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["MDiningPromiseClient","Heart","count","onClick","icon","type","theme","style","color","fontSize","lineHeight","paddingTop","overflowCount","offset","Math","floor","log10","size","shape","ghost","padding","margin","Category","category","heartCounts","onHeartClick","marginTop","fontWeight","getName","boxShadow","borderRadius","bodyStyle","itemLayout","dataSource","getMenuitemList","split","renderItem","item","Item","Meta","description","display","getAttributeList","reduce","a","b","getAllergensList","food","toLowerCase","Menu","props","state","diningHalls","menus","selectedCampus","selectedDiningHall","selectedDate","moment","selectedMenu","loading","menuCache","heartStream","mdiningclient","getDiningHalls","DiningHallsRequest","then","diningHallList","getDininghallsList","bursleyIdx","findIndex","diningHall","setState","fetchMenu","catch","error","console","log","menu","this","dayEvent","length","getDayeventsList","find","getKey","day","hours","getCalendareventList","event","getEventtitle","getMeal","getHoursOfMenu","getEventtimestart","getEventtimeend","now","isSame","withCategories","map","idx","filter","getHascategories","getEndTimeOfMenu","isSameOrAfter","sort","aHours","bHours","isAfter","diff","cacheKey","format","hasOwnProperty","setMenus","req","MenuRequest","setDate","setDininghall","setMeal","getMenu","getMenusList","HeartsRequest","names","getCategoryList","concat","menuItem","Set","forEach","name","addKeys","getHearts","res","updateHeartCounts","err","fetchHeartCountsForMenus","stopListeningHearts","startListeningHeartsForMenus","firstMenuWithCategories","diningHallIndex","getCampus","foodName","addHeart","heartsReply","newHeartCounts","getCountsList","getCount","streamHearts","on","status","cancel","key","getDescription","campusOptions","Array","from","localeCompare","campus","Button","value","options","entry","minWidth","startTime","endTime","timeDescriptionRelative","startTimeDescription","endTimeDescription","isBetween","clone","subtract","add","isBefore","fromNow","mealOptions","meal","getStartTimeOfMenu","className","justify","span","Group","maxWidth","buttonStyle","onChange","e","onChangeCampus","target","onChangeDate","allowClear","onChangeDiningHall","indicator","spin","spinning","renderCategories","Component","Header","Layout","Footer","Content","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bb89a03.chunk.js","sourcesContent":["import { MDiningPromiseClient } from 'mdining-proto';\nexport default new MDiningPromiseClient('https://michigan-dining-api.herokuapp.com');\n","import React from \"react\";\nimport { Icon, Badge, Button } from \"antd\";\n\nconst Heart = ({ count, onClick }) => {\n    const icon = (\n        <Icon\n            type=\"heart\"\n            theme=\"filled\"\n            style={{\n                color: \"red\",\n                fontSize: \"26px\",\n                lineHeight: \"26px\",\n                paddingTop: \"4px\"\n            }}\n        />\n    );\n    return (\n        <Badge\n            count={count}\n            overflowCount={99999999}\n            offset={[-5 + 3.5 * Math.floor(Math.log10(count)), 5]}\n        >\n            <Button\n                size=\"large\"\n                shape=\"circle\"\n                type=\"danger\"\n                ghost\n                style={{ padding: '0px', margin: '5px', paddingTop: '1px' }}\n                onClick={() => onClick()}\n            >\n                {icon}\n            </Button>\n        </Badge>\n    );\n};\n\nexport default Heart;\n","import React from 'react';\nimport { Card, List } from 'antd';\nimport Heart from '../Heart/Heart';\n\nconst Category = ({ category, heartCounts, onHeartClick }) => {\n    return (\n        <div>\n            <h2 style={{ fontSize: '12pt', margin: '2px', marginTop: '10px', fontWeight: 600 }}>{category.getName()}</h2>\n            <Card\n                style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px' }}\n                bodyStyle={{ padding: '10px' }}\n            >\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={category.getMenuitemList()}\n                    size=\"small\"\n                    split={false}\n                    renderItem={(item) => (\n                        <List.Item style={{ padding: '0px' }}>\n                            <List.Item.Meta\n                                style={{ padding: '0px' }}\n                                description={(\n                                    <div>\n                                        <h4 style={{ padding: '0px', margin: '0px' }}>{item.getName()}</h4>\n                                        <p style={{ margin: '0px', padding: '0px', display: 'block' }}>\n                                            <i>{item.getAttributeList().reduce((a, b) => `${a} ${b}`, '')} - </i>\n                                            <i>{item.getAllergensList().reduce((a, b) => `${a} ${b}`, '')}</i>\n                                        </p>\n                                    </div>\n                                )}\n                            />\n                            <Heart\n                                food={item.getName().toLowerCase()}\n                                count={heartCounts[item.getName().toLowerCase()]}\n                                onClick={() => onHeartClick(item.getName().toLowerCase())}\n                            />\n                        </List.Item>\n                    )}\n                />\n            </Card>\n        </div>\n    )\n}\n\nexport default Category;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { BrowserView, MobileView, } from \"react-device-detect\";\nimport { Row, Col, Card, Spin, Icon, DatePicker, Radio } from 'antd';\nimport mdiningclient from '../../api/mdiningservice';\nimport { DiningHallsRequest, MenuRequest, HeartsRequest } from 'mdining-proto';\nimport Category from './Category';\n\nconst dateFormat = 'YYYY-MM-DD';\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diningHalls: [],\n            menus: [],\n            selectedCampus: 'DINING HALLS',\n            selectedDiningHall: 0,\n            selectedDate: moment(),\n            selectedMenu: 0,\n            loading: true,\n            heartCounts: {},\n        };\n        this.menuCache = {};\n        this.heartStream = null;\n    }\n\n    componentDidMount() {\n        mdiningclient.getDiningHalls(new DiningHallsRequest())\n            .then((diningHalls) => {\n                const diningHallList = diningHalls.getDininghallsList();\n                const bursleyIdx = diningHallList.findIndex((diningHall) => diningHall.getName() === 'Bursley Dining Hall');\n                this.setState({ diningHalls: diningHallList, selectedDiningHall: bursleyIdx }, () => this.fetchMenu());\n            })\n            .catch((error) => console.log(error));\n    }\n\n    getHoursOfMenu(menu) {\n        const { selectedDiningHall, selectedDate, diningHalls } = this.state;\n        const dayEvent = diningHalls.length === 0 ? null : diningHalls[selectedDiningHall].getDayeventsList().find((dayEvent) => moment(dayEvent.getKey()).day() === selectedDate.day());\n        const hours = !dayEvent ? null : dayEvent.getCalendareventList().find((event) => event.getEventtitle().toLowerCase() === menu.getMeal().toLowerCase());\n        if (!hours) return null;\n        return hours;\n    }\n\n    getStartTimeOfMenu(menu) {\n        const hours = this.getHoursOfMenu(menu);\n        if (!hours) return null;\n        return moment(hours.getEventtimestart());\n    }\n\n    getEndTimeOfMenu(menu) {\n        const hours = this.getHoursOfMenu(menu);\n        if (!hours) return null;\n        return moment(hours.getEventtimeend());\n    }\n\n    firstMenuWithCategories(menus) {\n        const { selectedDate } = this.state;\n        const now = moment();\n        if (selectedDate.isSame(now, 'day')) {\n            const withCategories = menus\n                .map((menu, idx) => { return { idx, menu }; })\n                .filter((item) => item.menu.getHascategories() && this.getEndTimeOfMenu(item.menu) && this.getEndTimeOfMenu(item.menu).isSameOrAfter(now));\n            if (withCategories.length === 0) return 0;\n            const closestMenuInTime = withCategories.sort((a, b) => {\n                const aHours = this.getHoursOfMenu(a.menu);\n                const bHours = this.getHoursOfMenu(b.menu);\n                if (now.isAfter(moment(aHours.getEventtimestart()))) {\n                    return -1;\n                } else if (now.isAfter(moment(bHours.getEventtimestart()))) {\n                    return 1;\n                }\n                return moment(aHours.getEventtimestart()).diff(now) - moment(bHours.getEventtimestart()).diff(now);\n            })[0];\n            return closestMenuInTime.idx;\n        }\n        const idx = menus.findIndex((menu) => menu.getHascategories());\n        if (idx === -1) return 0;\n        return idx;\n    }\n\n    fetchMenu() {\n        const { diningHalls, selectedCampus, selectedDiningHall, selectedDate } = this.state;\n        if (diningHalls.length === 0) return;\n        const cacheKey = selectedCampus + selectedDiningHall + selectedDate.format(dateFormat);\n        if (this.menuCache.hasOwnProperty(cacheKey)) {\n            const menus = this.menuCache[cacheKey];\n            this.setMenus(menus);\n            return;\n        }\n        const req = new MenuRequest();\n        req.setDate(selectedDate.format(dateFormat));\n        req.setDininghall(diningHalls[selectedDiningHall].getName());\n        req.setMeal(null);\n        this.setState({ loading: true });\n        mdiningclient.getMenu(req)\n            .then((menu) => {\n                const menus = menu.getMenusList()\n                this.menuCache[cacheKey] = menus;\n                this.setMenus(menus);\n            })\n            .catch((error) => console.log(error));\n    }\n\n    fetchHeartCountsForMenus(menus) {\n        const req = new HeartsRequest();\n        const names = menus\n            .map((menu) => menu.getCategoryList())                  // List of list of category\n            .reduce((a, b) => a.concat(b), [])                            // List of category\n            .map((category) => category.getMenuitemList())          // List of list of menu items\n            .reduce((a, b) => a.concat(b), [])                            // List of menu items\n            .map((menuItem) => menuItem.getName().toLowerCase());   // List of names\n        new Set(names).forEach((name) => req.addKeys(name));\n        console.log(req);\n        mdiningclient.getHearts(req)\n            .then((res) => this.updateHeartCounts(res))\n            .catch((err) => console.log(err));\n    }\n\n    setMenus(menus) {\n        this.fetchHeartCountsForMenus(menus);\n        this.stopListeningHearts();\n        this.startListeningHeartsForMenus(menus);\n        this.setState({ menus, selectedMenu: this.firstMenuWithCategories(menus), loading: false });\n    }\n\n    onChangeDate(selectedDate) {\n        this.setState({ selectedDate }, () => this.fetchMenu());\n    }\n\n    onChangeDiningHall(selectedDiningHall) {\n        this.setState({ selectedDiningHall }, () => this.fetchMenu());\n    }\n\n    onChangeCampus(selectedCampus) {\n        const { diningHalls } = this.state;\n        const diningHallIndex = diningHalls.findIndex((diningHall) => diningHall.getCampus() === selectedCampus);\n        this.setState({ selectedCampus, selectedDiningHall: diningHallIndex }, () => this.fetchMenu());\n    }\n\n    onHeartClick(foodName) {\n        const req = new HeartsRequest();\n        req.addKeys(foodName);\n        mdiningclient.addHeart(req)\n            .then((res) => this.updateHeartCounts(res))\n            .catch((err) => console.log(err));\n    }\n\n    updateHeartCounts(heartsReply) {\n        const { heartCounts } = this.state;\n        const newHeartCounts = { ...heartCounts };\n        heartsReply.getCountsList().forEach((count) => newHeartCounts[count.getKey()] = count.getCount());\n        this.setState({ heartCounts: newHeartCounts });\n    }\n\n    startListeningHeartsForMenus(menus) {\n        const req = new HeartsRequest();\n        const names = menus\n            .map((menu) => menu.getCategoryList())                  // List of list of category\n            .reduce((a, b) => a.concat(b), [])                            // List of category\n            .map((category) => category.getMenuitemList())          // List of list of menu items\n            .reduce((a, b) => a.concat(b), [])                            // List of menu items\n            .map((menuItem) => menuItem.getName().toLowerCase());   // List of names\n        new Set(names).forEach((name) => req.addKeys(name));\n        this.heartStream = mdiningclient.streamHearts(req);\n        this.heartStream.on('data', (res) => this.updateHeartCounts(res));\n        this.heartStream.on('status', (status) => console.log(status));\n        this.heartStream.on('error', (err) => console.log(err));\n        this.heartStream.on('end', () => console.log('End of stream'));\n    }\n\n    stopListeningHearts() {\n        if (this.heartStream !== null) {\n            this.heartStream.cancel();\n        }\n        this.heartStream = null;\n    }\n\n    componentWillUnmount() {\n        this.stopListeningHearts();\n    }\n\n    renderCategories() {\n        const { selectedMenu, menus, heartCounts } = this.state;\n        if (menus.length === 0) {\n            return (<b>There's no data for this date :(</b>)\n        }\n        const menu = menus[selectedMenu];\n        if (!menu.getHascategories()) {\n            return (<b>{menu.getDescription()}</b>)\n        }\n        return menu.getCategoryList().map((category) => (<Category key={category.getName()} category={category} heartCounts={heartCounts} onHeartClick={(foodName) => this.onHeartClick(foodName)} />));\n    }\n\n    render() {\n        const { style } = this.props;\n        const { selectedCampus, selectedDiningHall, selectedDate, selectedMenu, diningHalls, menus, loading } = this.state;\n        const campusOptions = Array.from(new Set(diningHalls.map((diningHall) => diningHall.getCampus())))\n            .sort((a, b) => a.localeCompare(b))\n            .map((campus) => {\n                return (<Radio.Button key={campus} value={campus}>{campus}</Radio.Button>)\n            });\n        const options = diningHalls\n            .map((diningHall, idx) => { return { idx, diningHall }; })\n            .sort((a, b) => a.diningHall.getName().localeCompare(b.diningHall.getName()))\n            .filter((entry) => entry.diningHall.getCampus() === selectedCampus)\n            .map((entry) => {\n                return (\n                    <Radio.Button style={{ minWidth: 205 }} key={entry.idx} value={entry.idx}>{entry.diningHall.getName()}</Radio.Button>\n                );\n            });\n        const hours = diningHalls.length === 0 || menus.length === 0 ? null : this.getHoursOfMenu(menus[selectedMenu]);\n        const startTime = hours ? moment(hours.getEventtimestart()) : moment();\n        const endTime = hours ? moment(hours.getEventtimeend()) : moment();\n\n        let timeDescriptionRelative = null;\n        const startTimeDescription = startTime.format('h:mma');\n        const endTimeDescription = endTime.format('h:mma');\n        if (moment().isBetween(startTime.clone().subtract(24, 'hours'), endTime.clone().add(24, 'hours'))) {\n            if (moment().isBefore(startTime)) {\n                timeDescriptionRelative = 'Opens ' + startTime.fromNow();\n            } else if (moment().isBefore(endTime)) {\n                timeDescriptionRelative = 'Closes ' + endTime.fromNow();\n            } else {\n                timeDescriptionRelative = 'Closed ' + endTime.fromNow() + ' :(';\n            }\n        }\n        const mealOptions = menus\n            .map((menu, idx) => { return { idx, meal: menu.getMeal(), startTime: this.getStartTimeOfMenu(menu) }; })\n            .sort((a, b) => {\n                if (a.startTime && b.startTime) {\n                    return a.startTime.isBefore(b.startTime) ? -1 : a.meal.localeCompare(b.meal);\n                }\n                if (a.startTime) {\n                    return -1;\n                }\n                if (b.startTime) {\n                    return 1;\n                }\n                return a.meal.localeCompare(b.meal);\n            })\n            .map((entry) => (<Radio.Button style={{ minWidth: 125 }} key={entry.idx} value={entry.idx}>{entry.meal}</Radio.Button>));\n        return (\n            <div className=\"Menu\" style={style}>\n                <Row type=\"flex\" justify=\"center\">\n                    <Col span={23}>\n                        <Card\n                            style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                            bodyStyle={{ padding: '10px' }}\n                        >\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedCampus}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeCampus(e.target.value)}\n                            >\n                                {campusOptions}\n                            </Radio.Group>\n                            <MobileView>\n                                <input\n                                    style={{ margin: '5px', fontSize: '16px' }}\n                                    type=\"date\"\n                                    value={selectedDate.format(dateFormat)}\n                                    onChange={(e) => this.onChangeDate(moment(e.target.value))}\n                                />\n                            </MobileView>\n                            <BrowserView style={{ display: 'inline-block' }}>\n                                <DatePicker\n                                    style={{ margin: '5px' }}\n                                    value={selectedDate}\n                                    onChange={(selectedDate) => this.onChangeDate(selectedDate)}\n                                    allowClear={false}\n                                />\n                            </BrowserView>\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedDiningHall}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeDiningHall(e.target.value)}\n                            >\n                                {options}\n                            </Radio.Group>\n                            <br />\n                            <Radio.Group\n                                style={{ maxWidth: 400, margin: '5px' }}\n                                value={selectedMenu}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.setState({ selectedMenu: e.target.value })}\n                            >\n                                {mealOptions}\n                            </Radio.Group>\n                        </Card>\n                    </Col>\n                </Row>\n                <br />\n                <Spin indicator={(<Icon type=\"loading\" style={{ fontSize: 24 }} spin />)} spinning={loading}>\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col span={23}>\n                            <Card\n                                style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                                bodyStyle={{ padding: '10px' }}\n                            >\n                                {hours ?\n                                    (<p>\n                                        {timeDescriptionRelative}\n                                        <br />\n                                        <i>Hours: {startTimeDescription} - {endTimeDescription}</i>\n                                    </p>)\n                                    : null}\n                                {this.renderCategories()}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Spin>\n            </div>\n        )\n    }\n}\n\nexport default Menu;\n","import React from 'react';\nimport './App.css';\nimport { Row, Col, Layout } from 'antd';\nimport Menu from './components/Menu/Menu';\n\nconst { Header, Footer, Content } = Layout;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout style={{backgroundColor: 'transparent'}}>\n        <Header style={{backgroundColor: 'transparent', fontSize: '18pt', fontWeight: 600}}>MDining Menus</Header>\n        <Content style={{backgroundColor: 'transparent'}}>\n          <Row type=\"flex\" justify=\"center\">\n            <Col>\n              <Menu style={{maxWidth: '700px'}}/>\n            </Col>\n          </Row>\n        </Content>\n        <Footer style={{backgroundColor: 'transparent'}}>&copy; 2019 Anders Boberg</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
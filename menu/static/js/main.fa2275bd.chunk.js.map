{"version":3,"sources":["api/mdiningservice.js","components/Menu/Category.jsx","components/Menu/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["MDiningPromiseClient","Category","category","style","fontSize","margin","marginTop","fontWeight","getName","boxShadow","borderRadius","bodyStyle","padding","itemLayout","dataSource","getMenuitemList","size","split","renderItem","item","Item","Meta","description","display","getAttributeList","reduce","a","b","getAllergensList","Menu","props","state","diningHalls","menus","selectedCampus","selectedDiningHall","selectedDate","moment","selectedMenu","loading","menuCache","mdiningclient","getDiningHalls","DiningHallsRequest","then","diningHallList","getDininghallsList","bursleyIdx","findIndex","diningHall","setState","fetchMenu","catch","error","console","log","meal","this","dayEvent","length","getDayeventsList","find","getKey","day","hours","getCalendareventList","event","getEventtitle","toLowerCase","getEventtimestart","idx","menu","getHascategories","cacheKey","format","hasOwnProperty","firstMenuWithCategories","req","MenuRequest","setDate","setDininghall","setMeal","getMenu","getMenusList","diningHallIndex","getCampus","getCategoryList","map","key","getDescription","campusOptions","Array","from","Set","sort","localeCompare","campus","Button","value","options","filter","entry","minWidth","getMeal","startTime","endTime","getEventtimeend","timeDescriptionRelative","startTimeDescription","endTimeDescription","isBetween","clone","subtract","add","isBefore","fromNow","mealOptions","getStartTimeOfMeal","className","type","justify","span","Group","maxWidth","buttonStyle","onChange","e","onChangeCampus","target","onChangeDate","allowClear","onChangeDiningHall","indicator","spin","spinning","renderCategories","Component","Header","Layout","Footer","Content","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa2275bd.chunk.js","sourcesContent":["import { MDiningPromiseClient } from 'mdining-proto';\nexport default new MDiningPromiseClient('https://michigan-dining-api.herokuapp.com');\n","import React from 'react';\nimport {Card, List } from 'antd';\n\nconst Category = ({category}) => {\n    return (\n        <div>\n            <h2 style={{fontSize: '12pt', margin: '2px', marginTop: '10px', fontWeight: 600}}>{category.getName()}</h2>\n            <Card \n                style={{boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px'}}\n                bodyStyle={{padding: '10px'}}\n            >\n            <List \n                itemLayout=\"horizontal\"\n                dataSource={category.getMenuitemList()}\n                size=\"small\"\n                split={false}\n                renderItem={(item) => (\n                    <List.Item style={{padding: '0px'}}>\n                        <List.Item.Meta\n                            style={{padding: '0px'}}\n                            description={(\n                                <div>\n                                <h4 style={{padding: '0px', margin: '0px'}}>{item.getName()}</h4>\n                                <p style={{margin: '0px', padding: '0px', display: 'block'}}>\n                                    <i>{item.getAttributeList().reduce((a, b) => `${a} ${b}`, '')} - </i>\n                                    <i>{item.getAllergensList().reduce((a, b) => `${a} ${b}`, '')}</i>\n                                </p>\n                                </div>\n                            )}\n                        />\n                    </List.Item>\n                )}\n            />\n            </Card>\n        </div>\n    )\n}\n\nexport default Category;\n","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { BrowserView, MobileView, } from \"react-device-detect\";\nimport { Row, Col, Card, Spin, Icon, DatePicker, Radio } from 'antd';\nimport mdiningclient from '../../api/mdiningservice';\nimport { DiningHallsRequest, MenuRequest } from 'mdining-proto';\nimport Category from './Category';\n\nconst dateFormat = 'YYYY-MM-DD';\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diningHalls: [],\n            menus: [],\n            selectedCampus: 'DINING HALLS',\n            selectedDiningHall: 0,\n            selectedDate: moment(),\n            selectedMenu: 0,\n            loading: true,\n        };\n        this.menuCache = {};\n    }\n\n    componentDidMount() {\n        mdiningclient.getDiningHalls(new DiningHallsRequest())\n            .then((diningHalls) => {\n                const diningHallList = diningHalls.getDininghallsList();\n                const bursleyIdx = diningHallList.findIndex((diningHall) => diningHall.getName() === 'Bursley Dining Hall');\n                this.setState({ diningHalls: diningHallList, selectedDiningHall: bursleyIdx }, () => this.fetchMenu());\n            })\n            .catch((error) => console.log(error));\n    }\n\n    getStartTimeOfMeal(meal) {\n        const { selectedDiningHall, selectedDate, diningHalls, menus } = this.state;\n        const dayEvent = diningHalls.length === 0 || menus.length === 0 ? null : diningHalls[selectedDiningHall].getDayeventsList().find((dayEvent) => moment(dayEvent.getKey()).day() === selectedDate.day());\n        const hours =  !dayEvent ? null : dayEvent.getCalendareventList().find((event) => event.getEventtitle().toLowerCase() === meal.toLowerCase());\n        if (!hours) return null;\n        return moment(hours.getEventtimestart());\n    }\n\n    firstMenuWithCategories(menus) {\n        const idx = menus.findIndex((menu) => menu.getHascategories());\n        if (idx === -1) return 0;\n        return idx;\n    }\n\n    fetchMenu() {\n        const { diningHalls, selectedCampus, selectedDiningHall, selectedDate } = this.state;\n        if (diningHalls.length === 0) return;\n        const cacheKey = selectedCampus + selectedDiningHall + selectedDate.format(dateFormat);\n        if (this.menuCache.hasOwnProperty(cacheKey)) {\n            const menus = this.menuCache[cacheKey];\n            this.setState({ menus, selectedMenu: this.firstMenuWithCategories(menus) });\n            return;\n        }\n        const req = new MenuRequest();\n        req.setDate(selectedDate.format(dateFormat));\n        req.setDininghall(diningHalls[selectedDiningHall].getName());\n        req.setMeal(null);\n        this.setState({ loading: true });\n        mdiningclient.getMenu(req)\n            .then((menu) => {\n                const menus = menu.getMenusList()\n                this.menuCache[cacheKey] = menus;\n                this.setState({ menus, selectedMenu: this.firstMenuWithCategories(menus), loading: false });\n            })\n            .catch((error) => console.log(error));\n    }\n\n    onChangeDate(selectedDate) {\n        this.setState({ selectedDate }, () => this.fetchMenu());\n    }\n\n    onChangeDiningHall(selectedDiningHall) {\n        this.setState({ selectedDiningHall }, () => this.fetchMenu());\n    }\n\n    onChangeCampus(selectedCampus) {\n        const { diningHalls } = this.state;\n        const diningHallIndex = diningHalls.findIndex((diningHall) => diningHall.getCampus() === selectedCampus);\n        this.setState({ selectedCampus, selectedDiningHall: diningHallIndex }, () => this.fetchMenu());\n    }\n\n    renderCategories() {\n        const { selectedMenu, menus } = this.state;\n        if (menus.length === 0) {\n            return (<b>There's no data for this date :(</b>)\n        }\n        const menu = menus[selectedMenu];\n        if (!menu.getHascategories()) {\n            return (<b>{menu.getDescription()}</b>)\n        }\n        return menu.getCategoryList().map((category) => (<Category key={category.getName()} category={category} />));\n    }\n\n    render() {\n        const { style } = this.props;\n        const { selectedCampus, selectedDiningHall, selectedDate, selectedMenu, diningHalls, menus, loading } = this.state;\n        const campusOptions = Array.from(new Set(diningHalls.map((diningHall) => diningHall.getCampus())))\n            .sort((a, b) => a.localeCompare(b))\n            .map((campus) => {\n                return (<Radio.Button key={campus} value={campus}>{campus}</Radio.Button>)\n            });\n        const options = diningHalls\n            .map((diningHall, idx) => { return { idx, diningHall }; })\n            .sort((a, b) => a.diningHall.getName().localeCompare(b.diningHall.getName()))\n            .filter((entry) => entry.diningHall.getCampus() === selectedCampus)\n            .map((entry) => {\n                return (\n                    <Radio.Button style={{ minWidth: 205 }} key={entry.idx} value={entry.idx}>{entry.diningHall.getName()}</Radio.Button>\n                );\n            });\n        const dayEvent = diningHalls.length === 0 || menus.length === 0 ? null : diningHalls[selectedDiningHall].getDayeventsList().find((dayEvent) => moment(dayEvent.getKey()).day() === selectedDate.day());\n        const hours =  !dayEvent ? null : dayEvent.getCalendareventList().find((event) => event.getEventtitle().toLowerCase() === menus[selectedMenu].getMeal().toLowerCase() || (event.getEventtitle().toLowerCase() === 'open'));\n\n        const startTime = hours ? moment(hours.getEventtimestart()) : moment();\n        const endTime = hours ? moment(hours.getEventtimeend()) : moment();\n\n        let timeDescriptionRelative = null;\n        const startTimeDescription = startTime.format('h:mma');\n        const endTimeDescription = endTime.format('h:mma');\n        if (moment().isBetween(startTime.clone().subtract(24, 'hours'), endTime.clone().add(24, 'hours'))) {\n            if (moment().isBefore(startTime)) {\n                timeDescriptionRelative = 'Opens ' + startTime.fromNow();\n            } else if (moment().isBefore(endTime)) {\n                timeDescriptionRelative = 'Closes ' + endTime.fromNow();\n            } else {\n                timeDescriptionRelative = 'Closed ' + endTime.fromNow() + ' :(';\n            }\n        }\n        const mealOptions = menus\n            .map((menu, idx) => { return { idx, meal: menu.getMeal(), startTime: this.getStartTimeOfMeal(menu.getMeal()) }; })\n            .sort((a, b) => {\n                if (a.startTime && b.startTime) {\n                    return a.startTime.isBefore(b.startTime) ? -1 : a.meal.localeCompare(b.meal);\n                }\n                if (a.startTime) {\n                    return -1;\n                }\n                if (b.startTime) {\n                    return 1;\n                }\n                return a.meal.localeCompare(b.meal);\n            })\n            .map((entry) => (<Radio.Button style={{ minWidth: 125 }} key={entry.idx} value={entry.idx}>{entry.meal}</Radio.Button>));\n        return (\n            <div className=\"Menu\" style={style}>\n                <Row type=\"flex\" justify=\"center\">\n                    <Col span={23}>\n                        <Card\n                            style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                            bodyStyle={{ padding: '10px' }}\n                        >\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedCampus}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeCampus(e.target.value)}\n                            >\n                                {campusOptions}\n                            </Radio.Group>\n                            <MobileView>\n                                <input\n                                    style={{ margin: '5px', fontSize: '16px' }}\n                                    type=\"date\"\n                                    value={selectedDate.format(dateFormat)}\n                                    onChange={(e) => this.onChangeDate(moment(e.target.value))}\n                                />\n                            </MobileView>\n                            <BrowserView style={{ display: 'inline-block' }}>\n                                <DatePicker\n                                    style={{ margin: '5px' }}\n                                    value={selectedDate}\n                                    onChange={(selectedDate) => this.onChangeDate(selectedDate)}\n                                    allowClear={false}\n                                />\n                            </BrowserView>\n                            <Radio.Group\n                                style={{ maxWidth: 800, margin: '5px' }}\n                                value={selectedDiningHall}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.onChangeDiningHall(e.target.value)}\n                            >\n                                {options}\n                            </Radio.Group>\n                            <br />\n                            <Radio.Group\n                                style={{ maxWidth: 400, margin: '5px' }}\n                                value={selectedMenu}\n                                buttonStyle=\"solid\"\n                                onChange={(e) => this.setState({ selectedMenu: e.target.value })}\n                            >\n                                {mealOptions}\n                            </Radio.Group>\n                        </Card>\n                    </Col>\n                </Row>\n                <br />\n                <Spin indicator={(<Icon type=\"loading\" style={{ fontSize: 24 }} spin />)} spinning={loading}>\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col span={23}>\n                            <Card\n                                style={{ boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.1)', borderRadius: '5px', padding: '0px' }}\n                                bodyStyle={{ padding: '10px' }}\n                            >\n                                {hours ?\n                                    (<p>\n                                        {timeDescriptionRelative}\n                                        <br />\n                                        <i>Hours: {startTimeDescription} - {endTimeDescription}</i>\n                                    </p>)\n                                    : null}\n                                {this.renderCategories()}\n                            </Card>\n                        </Col>\n                    </Row>\n                </Spin>\n            </div>\n        )\n    }\n}\n\nexport default Menu;\n","import React from 'react';\nimport './App.css';\nimport { Row, Col, Layout } from 'antd';\nimport Menu from './components/Menu/Menu';\n\nconst { Header, Footer, Content } = Layout;\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout style={{backgroundColor: 'transparent'}}>\n        <Header style={{backgroundColor: 'transparent', fontSize: '18pt', fontWeight: 600}}>MDining Menus</Header>\n        <Content style={{backgroundColor: 'transparent'}}>\n          <Row type=\"flex\" justify=\"center\">\n            <Col>\n              <Menu style={{maxWidth: '700px'}}/>\n            </Col>\n          </Row>\n        </Content>\n        <Footer style={{backgroundColor: 'transparent'}}>&copy; 2019 Anders Boberg</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
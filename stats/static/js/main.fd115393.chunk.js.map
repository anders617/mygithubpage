{"version":3,"sources":["components/DateLineChart/DateLineChart.jsx","api/mdiningservice.js","components/ChartContainer/ChartContainer.jsx","components/ShareContainer/ShareContainer.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["axisColor","graphBackgroundColor","leftInset","rightInset","bottomInset","topInset","xAccessor","d","x","yAccessor","y","DateLineChart","height","data","width","title","className","style","minWidth","flexBasis","margin","flexGrow","flexShrink","options","max","scale","ParentSize","xMax","xMin","yMax","yMin","xScale","scaleTime","range","domain","extent","yScale","scaleLinear","GradientOrangeRed","id","vertical","GradientPinkBlue","rx","fill","Text","fontFamily","fontWeight","fontSize","verticalAnchor","textAnchor","LinePath","stroke","strokeWidth","curve","curveCatmullRom","Group","AxisLeft","left","label","labelProps","numTicks","tickStroke","tickLabelProps","value","index","dx","dy","AxisBottom","top","MDiningPromiseClient","ChartContainer","props","state","foodStats","error","mDiningClient","getFoodStats","FoodStatsRequest","then","res","setState","getFoodstatsList","catch","this","color","verticalAlign","lineHeight","attributes","length","getAttributecountsMap","forEach","count","attr","push","attributeCharts","map","attribute","stat","totalFoodMealsServed","getTotalfoodmealsserved","Date","getDate","get","sort","a","b","key","allergens","getAllergencountsMap","allergen","allergenCharts","allergensMap","allergenCount","isNaN","Fragment","display","flexDirection","alignItems","justifyContent","marginBottom","backgroundColor","maxWidth","borderRadius","marginLeft","href","textDecoration","flexWrap","alignContent","Component","buttonStyle","cursor","ShareContainer","url","size","round","body","FacebookShareButton","quote","FacebookIcon","LinkedinShareButton","windowWidth","windowHeight","LinkedinIcon","TwitterShareButton","TwitterIcon","TelegramShareButton","TelegramIcon","WhatsappShareButton","separator","WhatsappIcon","RedditShareButton","RedditIcon","TumblrShareButton","TumblrIcon","EmailShareButton","subject","EmailIcon","Footer","target","rel","marginTop","App","window","location","fontStyle","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd115393.chunk.js","sourcesContent":["import React from 'react';\nimport Tilt from 'react-tilt';\nimport { GradientPinkBlue, GradientOrangeRed } from '@vx/gradient';\nimport { ParentSize } from '@vx/responsive';\nimport { LinePath } from '@vx/shape';\nimport { scaleLinear, scaleTime } from '@vx/scale';\nimport { curveCatmullRom } from '@vx/curve';\nimport { Group } from '@vx/group';\nimport { AxisLeft, AxisBottom } from '@vx/axis';\nimport { Text } from '@vx/text';\nimport { extent, max } from 'd3-array';\n\nconst axisColor = '#FFFFFF';//'#282c34';\nconst graphBackgroundColor = '#32deaa';\nconst leftInset = 75;\nconst rightInset = 50;\nconst bottomInset = 60;\nconst topInset = 70;\n\nconst xAccessor = (d) => d.x\nconst yAccessor = (d) => d.y\n\nfunction DateLineChart({ height, width, data, title }) {\n  return (\n    <div className=\"DateLineChart\" style={{ height: height, minWidth: '300px', flexBasis: '0px', margin: '15px', flexGrow: 1, flexShrink: 1 }}>\n      <Tilt className=\"Tilt\" options={{ max : 5, scale: 1.05 }} style={{width: '100%', height: '100%'}}>\n        <ParentSize className=\"graph-container\">\n          {({ width, height }) => {\n            // bounds\n            const xMax = width - rightInset;\n            const xMin = leftInset;\n            const yMax = height - bottomInset;\n            const yMin = topInset;\n\n            // scales\n            const xScale = scaleTime({\n              range: [xMin, xMax],\n              domain: extent(data, xAccessor)\n            });\n            const yScale = scaleLinear({\n              range: [yMax, yMin],\n              domain: [0, max(data, yAccessor)]\n            });\n            return (\n              <svg width={width} height={height}>\n                <GradientOrangeRed id=\"Background\" vertical={true} />\n                <GradientPinkBlue id=\"Title\" vertical={false} />\n                <rect x={0} y={0} width={width} height={height} rx={10} fill={graphBackgroundColor} />\n                <Text style={{ fontFamily: 'Arial', fontWeight: 600, fontSize: '22px' }} fill={'#FFFFFF'} verticalAnchor=\"start\" textAnchor=\"middle\" x={width / 2} y={20} width={width === 0 ? 1 : width}>{title}</Text>\n                <LinePath\n                  data={data}\n                  x={d => xScale(xAccessor(d))}\n                  y={d => yScale(yAccessor(d))}\n                  stroke={axisColor}\n                  strokeWidth={2}\n                  curve={curveCatmullRom}\n                />\n                <Group>\n                  <AxisLeft\n                    left={leftInset}\n                    scale={yScale}\n                    label=\"Percent\"\n                    labelProps={{\n                      fill: axisColor,\n                      textAnchor: 'middle',\n                      fontSize: 14,\n                      fontWeight: 600,\n                    }}\n                    numTicks={5}\n                    stroke={axisColor}\n                    tickStroke={axisColor}\n                    tickLabelProps={(value, index) => ({\n                      fill: axisColor,\n                      textAnchor: 'end',\n                      fontSize: 12,\n                      fontWeight: 600,\n                      dx: '-0.25em',\n                      dy: '0.25em'\n                    })}\n                  />\n                  <AxisBottom\n                    top={height - bottomInset}\n                    scale={xScale}\n                    label=\"Date\"\n                    labelProps={{\n                      fill: axisColor,\n                      textAnchor: 'middle',\n                      fontSize: 14,\n                      fontWeight: 600,\n                    }}\n                    stroke={axisColor}\n                    tickStroke={axisColor}\n                    numTicks={5}\n                    tickLabelProps={(value, index) => ({\n                      fill: axisColor,\n                      textAnchor: 'middle',\n                      fontSize: 8,\n                      fontWeight: 600,\n                      dy: '0.25em'\n                    })}\n                  />\n                </Group>\n              </svg>\n            );\n          }}\n        </ParentSize>\n      </Tilt>\n    </div>\n  );\n}\n\nexport default DateLineChart;\n","import { MDiningPromiseClient } from 'mdining-proto';\nexport default new MDiningPromiseClient('https://michigan-dining-api.herokuapp.com');\n","import React, { Component } from 'react';\nimport Tilt from 'react-tilt';\nimport { FoodStatsRequest } from 'mdining-proto';\n\nimport DateLineChart from '../DateLineChart/DateLineChart';\nimport mDiningClient from '../../api/mdiningservice';\n\nclass ChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            foodStats: [],\n            error: null,\n        };\n    }\n\n    componentDidMount() {\n        mDiningClient.getFoodStats(new FoodStatsRequest())\n            .then((res) => {\n                this.setState({ foodStats: res.getFoodstatsList(), error: null });\n            }).catch((error) => {\n                this.setState({ foodStats: [], error });\n            });\n    }\n\n    render() {\n        const { foodStats, error } = this.state;\n        if (error !== null) {\n            return (\n                <div className=\"ChartContainer\" style={{ color: 'white', fontSize: '36px', height: '80vh', verticalAlign: 'middle', lineHeight: '80vh' }}>\n                    {\"Something went wrong :(\"}\n                </div>\n            );\n        }\n        const attributes = [];\n        if (foodStats.length > 0) {\n            foodStats[0].getAttributecountsMap().forEach((count, attr) => {\n                attributes.push(attr);\n            });\n        }\n        const attributeCharts = attributes.map((attribute) => {\n            const data = foodStats.map((stat) => {\n                const attributes = stat.getAttributecountsMap();\n                const totalFoodMealsServed = stat.getTotalfoodmealsserved();\n                return {\n                    x: new Date(stat.getDate()),\n                    y: 100 * attributes.get(attribute) / totalFoodMealsServed,\n                };\n            });\n            data.sort((a, b) => a.x - b.x);\n            return (<DateLineChart key={attribute} width={'45vw'} height={'260px'} data={data} title={`Percentage of Food Servings That Are ${attribute}`} />)\n        });\n        const allergens = [];\n        if (foodStats.length > 0) {\n            foodStats[0].getAllergencountsMap().forEach((count, allergen) => {\n                allergens.push(allergen);\n            });\n        }\n        const allergenCharts = allergens.map((allergen) => {\n            const data = foodStats.map((stat) => {\n                const allergensMap = stat.getAllergencountsMap();\n                const totalFoodMealsServed = stat.getTotalfoodmealsserved();\n                let allergenCount = allergensMap.get(allergen);\n                if (isNaN(allergenCount)) {\n                    // If NaN then it isn't in the map which means there were no instances of it.\n                    allergenCount = 0;\n                }\n                return {\n                    x: new Date(stat.getDate()),\n                    y: 100 * allergenCount / totalFoodMealsServed,\n                };\n            });\n            data.sort((a, b) => a.x - b.x);\n            return (<DateLineChart key={allergen} width={'45vw'} height={'260px'} data={data} title={`Percentage of Food Servings That Contain ${allergen}`} />)\n        });\n        return (\n            <React.Fragment>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginBottom: '20px'}}>\n                    <Tilt className=\"Tilt\" options={{ max: 5, scale: 1.05 }} style={{ flexBasis: '200px'}}>\n                        <div style={{ backgroundColor: '#32deaa', maxWidth: '200px', display: 'flex', flexDirection: 'column', alignItems: 'start', borderRadius: '10px' }}>\n                            <h3 style={{ marginLeft: '15px', marginBottom: '10px' }}>Sections</h3>\n                            <a href=\"#Attributes\" style={{ marginBottom: '10px', marginLeft: '20px', color: 'white', textDecoration: 'none', fontWeight: 600 }}>Attributes</a>\n                            <a href=\"#Allergens\" style={{ marginBottom: '20px', marginLeft: '20px', color: 'white', textDecoration: 'none', fontWeight: 600 }}>Allergens</a>\n                        </div>\n                    </Tilt>\n                </div>\n                <header className=\"AttributeChartsHeader\" id=\"Attributes\" style={{ fontSize: '20pt', fontWeight: '600' }}>Attribute Metrics</header>\n                <div className=\"AttributeChartContainer\" style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-evenly', alignContent: 'space-around', width: '100vw' }}>\n                    {attributeCharts}\n                </div>\n                <header className=\"AllergenChartsHeader\" id=\"Allergens\" style={{ fontSize: '20pt', fontWeight: '600' }}>Allergen Metrics</header>\n                <div className=\"AllergenChartContainer\" style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-evenly', alignContent: 'space-around', width: '100vw' }}>\n                    {allergenCharts}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ChartContainer;\n","import React from 'react';\nimport {\n    // Buttons\n    FacebookShareButton,\n    LinkedinShareButton,\n    TwitterShareButton,\n    TelegramShareButton,\n    WhatsappShareButton,\n    RedditShareButton,\n    TumblrShareButton,\n    EmailShareButton,\n    // Icons\n    FacebookIcon,\n    LinkedinIcon,\n    TwitterIcon,\n    TelegramIcon,\n    WhatsappIcon,\n    RedditIcon,\n    TumblrIcon,\n    EmailIcon,\n} from 'react-share';\n\nconst buttonStyle = {\n    margin: '3px',\n    cursor: 'pointer',\n};\n\nconst ShareContainer = ({ url, size = 32, round = true, title = '', body = '' }) => {\n    return (\n        <div className=\"ShareContainer\" style={{display: 'flex', justifyContent: 'center'}}>\n            <FacebookShareButton \n                url={url} \n                quote={title}\n                style={buttonStyle}\n            >\n                <FacebookIcon size={size} round={round} />\n            </FacebookShareButton>\n            <LinkedinShareButton \n                url={url} \n                windowWidth={750}\n                windowHeight={600}\n                style={buttonStyle}\n            >\n                <LinkedinIcon size={size} round={round} />\n            </LinkedinShareButton>\n            <TwitterShareButton \n                url={url} \n                title={title}\n                style={buttonStyle}\n            >\n                <TwitterIcon size={size} round={round} />\n            </TwitterShareButton>\n            <TelegramShareButton \n                url={url} \n                title={title}\n                style={buttonStyle}\n            >\n                <TelegramIcon size={size} round={round} />\n            </TelegramShareButton>\n            <WhatsappShareButton \n                url={url} \n                title={title}\n                separator={':: '}\n                style={buttonStyle}\n            >\n                <WhatsappIcon size={size} round={round} />\n            </WhatsappShareButton>\n            <RedditShareButton \n                url={url} \n                title={title}\n                windowWidth={660}\n                windowHeight={460}\n                style={buttonStyle}\n            >\n                <RedditIcon size={size} round={round} />\n            </RedditShareButton>\n            <TumblrShareButton \n                url={url} \n                title={title}\n                windowWidth={660}\n                windowHeight={460}\n                style={buttonStyle}\n            >\n                <TumblrIcon size={size} round={round} />\n            </TumblrShareButton>\n            <EmailShareButton \n                url={url} \n                subject={title}\n                body={body}\n                style={buttonStyle}\n            >\n                <EmailIcon size={size} round={round} />\n            </EmailShareButton>\n        </div>\n    )\n}\n\nexport default ShareContainer;\n","import React from 'react';\nimport { GoMarkGithub } from \"react-icons/go\";\n\nconst githubUrl = 'https://github.com/anders617/tendiestime';\n\nconst Footer = (props) => {\n    return (\n        <div className=\"Footer\" style={{ margin: '10px' }}>\n            <a href={githubUrl} target=\"_blank\" rel=\"noopener noreferrer\" style={{ color: '#000000', textDecoration: 'none' }}>\n                <GoMarkGithub size={32} />\n                <p style={{fontSize: '8pt', fontWeight: '600', marginTop: '2px'}}>\n                    View Me On Github\n                </p>\n            </a>\n            <p style={{fontSize: '8pt', fontWeight: '600'}}>\n                &copy; 2019 Anders Boberg\n            </p>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport ChartContainer from './components/ChartContainer/ChartContainer';\nimport ShareContainer from './components/ShareContainer/ShareContainer';\nimport Footer from './components/Footer/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{color: '#000000', marginTop: '20px'}}>\n          <ShareContainer url={window.location.href} size={32} title={'MDining Stats! from tendiesti.me'} body={'Check this out!'} />\n        </div>\n        <h1 style={{color: '#000000', fontSize: '24px', fontWeight: '900', fontFamily: 'Arial', margin: '10px', marginBottom: '0px'}}>\n          MDining Stats!\n        </h1>\n        <h2 style={{color: '#3F3F3F', fontSize: '16px', fontWeight: '200', fontFamily: 'Arial', fontStyle: 'italic', margin: '20px', marginTop: '5px'}}>\n          Updated Daily\n        </h2>\n      </header>\n      <ChartContainer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
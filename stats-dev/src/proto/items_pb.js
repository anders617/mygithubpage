/* eslint-disable */
// source: proto/items.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_food_pb = require('../proto/food_pb.js');
goog.object.extend(proto, proto_food_pb);
goog.exportSymbol('proto.mdining.Item', null, global);
goog.exportSymbol('proto.mdining.Item.DiningHallMatch', null, global);
goog.exportSymbol('proto.mdining.Items', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.Items = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mdining.Items, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.Items.displayName = 'proto.mdining.Items';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.Item.repeatedFields_, null);
};
goog.inherits(proto.mdining.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.Item.displayName = 'proto.mdining.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.Item.DiningHallMatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.Item.DiningHallMatch.repeatedFields_, null);
};
goog.inherits(proto.mdining.Item.DiningHallMatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.Item.DiningHallMatch.displayName = 'proto.mdining.Item.DiningHallMatch';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.Items.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.Items.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.Items} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Items.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, proto.mdining.Item.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.Items}
 */
proto.mdining.Items.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.Items;
  return proto.mdining.Items.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.Items} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.Items}
 */
proto.mdining.Items.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.mdining.Item.deserializeBinaryFromReader, "", new proto.mdining.Item());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.Items.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.Items.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.Items} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Items.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.mdining.Item.serializeBinaryToWriter);
  }
};


/**
 * map<string, Item> items = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.mdining.Item>}
 */
proto.mdining.Items.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.mdining.Item>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.mdining.Item));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.mdining.Items} returns this
 */
proto.mdining.Items.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.Item.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attributesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    dininghallmatchesMap: (f = msg.getDininghallmatchesMap()) ? f.toObject(includeInstance, proto.mdining.Item.DiningHallMatch.toObject) : [],
    dininghallmatchesarrayList: jspb.Message.toObjectList(msg.getDininghallmatchesarrayList(),
    proto.mdining.Item.DiningHallMatch.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.Item}
 */
proto.mdining.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.Item;
  return proto.mdining.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.Item}
 */
proto.mdining.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAttributes(value);
      break;
    case 3:
      var value = msg.getDininghallmatchesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.mdining.Item.DiningHallMatch.deserializeBinaryFromReader, "", new proto.mdining.Item.DiningHallMatch());
         });
      break;
    case 4:
      var value = new proto.mdining.Item.DiningHallMatch;
      reader.readMessage(value,proto.mdining.Item.DiningHallMatch.deserializeBinaryFromReader);
      msg.addDininghallmatchesarray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getDininghallmatchesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.mdining.Item.DiningHallMatch.serializeBinaryToWriter);
  }
  f = message.getDininghallmatchesarrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.mdining.Item.DiningHallMatch.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.Item.DiningHallMatch.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.Item.DiningHallMatch.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.Item.DiningHallMatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.Item.DiningHallMatch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Item.DiningHallMatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mealtimesMap: (f = msg.getMealtimesMap()) ? f.toObject(includeInstance, proto.mdining.MealTime.toObject) : [],
    mealtimesarrayList: jspb.Message.toObjectList(msg.getMealtimesarrayList(),
    proto_food_pb.MealTime.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.Item.DiningHallMatch}
 */
proto.mdining.Item.DiningHallMatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.Item.DiningHallMatch;
  return proto.mdining.Item.DiningHallMatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.Item.DiningHallMatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.Item.DiningHallMatch}
 */
proto.mdining.Item.DiningHallMatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getMealtimesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.mdining.MealTime.deserializeBinaryFromReader, "", new proto.mdining.MealTime());
         });
      break;
    case 3:
      var value = new proto_food_pb.MealTime;
      reader.readMessage(value,proto_food_pb.MealTime.deserializeBinaryFromReader);
      msg.addMealtimesarray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.Item.DiningHallMatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.Item.DiningHallMatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.Item.DiningHallMatch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.Item.DiningHallMatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMealtimesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.mdining.MealTime.serializeBinaryToWriter);
  }
  f = message.getMealtimesarrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto_food_pb.MealTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mdining.Item.DiningHallMatch.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.Item.DiningHallMatch} returns this
 */
proto.mdining.Item.DiningHallMatch.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, MealTime> mealTimes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.mdining.MealTime>}
 */
proto.mdining.Item.DiningHallMatch.prototype.getMealtimesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.mdining.MealTime>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.mdining.MealTime));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.mdining.Item.DiningHallMatch} returns this
 */
proto.mdining.Item.DiningHallMatch.prototype.clearMealtimesMap = function() {
  this.getMealtimesMap().clear();
  return this;};


/**
 * repeated MealTime mealTimesArray = 3;
 * @return {!Array<!proto.mdining.MealTime>}
 */
proto.mdining.Item.DiningHallMatch.prototype.getMealtimesarrayList = function() {
  return /** @type{!Array<!proto.mdining.MealTime>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_food_pb.MealTime, 3));
};


/**
 * @param {!Array<!proto.mdining.MealTime>} value
 * @return {!proto.mdining.Item.DiningHallMatch} returns this
*/
proto.mdining.Item.DiningHallMatch.prototype.setMealtimesarrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.mdining.MealTime=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.MealTime}
 */
proto.mdining.Item.DiningHallMatch.prototype.addMealtimesarray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.mdining.MealTime, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.Item.DiningHallMatch} returns this
 */
proto.mdining.Item.DiningHallMatch.prototype.clearMealtimesarrayList = function() {
  return this.setMealtimesarrayList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mdining.Item.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string attributes = 2;
 * @return {!Array<string>}
 */
proto.mdining.Item.prototype.getAttributesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.setAttributesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.addAttributes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * map<string, DiningHallMatch> diningHallMatches = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.mdining.Item.DiningHallMatch>}
 */
proto.mdining.Item.prototype.getDininghallmatchesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.mdining.Item.DiningHallMatch>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.mdining.Item.DiningHallMatch));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.clearDininghallmatchesMap = function() {
  this.getDininghallmatchesMap().clear();
  return this;};


/**
 * repeated DiningHallMatch diningHallMatchesArray = 4;
 * @return {!Array<!proto.mdining.Item.DiningHallMatch>}
 */
proto.mdining.Item.prototype.getDininghallmatchesarrayList = function() {
  return /** @type{!Array<!proto.mdining.Item.DiningHallMatch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mdining.Item.DiningHallMatch, 4));
};


/**
 * @param {!Array<!proto.mdining.Item.DiningHallMatch>} value
 * @return {!proto.mdining.Item} returns this
*/
proto.mdining.Item.prototype.setDininghallmatchesarrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.mdining.Item.DiningHallMatch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.Item.DiningHallMatch}
 */
proto.mdining.Item.prototype.addDininghallmatchesarray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.mdining.Item.DiningHallMatch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.Item} returns this
 */
proto.mdining.Item.prototype.clearDininghallmatchesarrayList = function() {
  return this.setDininghallmatchesarrayList([]);
};


goog.object.extend(exports, proto.mdining);

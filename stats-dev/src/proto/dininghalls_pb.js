/* eslint-disable */
// source: proto/dininghalls.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.mdining.DiningHall', null, global);
goog.exportSymbol('proto.mdining.DiningHall.Building', null, global);
goog.exportSymbol('proto.mdining.DiningHall.Building.Address', null, global);
goog.exportSymbol('proto.mdining.DiningHall.Capacity', null, global);
goog.exportSymbol('proto.mdining.DiningHall.DayEvent', null, global);
goog.exportSymbol('proto.mdining.DiningHall.DayEvent.CalendarEvent', null, global);
goog.exportSymbol('proto.mdining.DiningHall.DayHour', null, global);
goog.exportSymbol('proto.mdining.DiningHalls', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHalls = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.DiningHalls.repeatedFields_, null);
};
goog.inherits(proto.mdining.DiningHalls, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHalls.displayName = 'proto.mdining.DiningHalls';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.DiningHall.repeatedFields_, null);
};
goog.inherits(proto.mdining.DiningHall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.displayName = 'proto.mdining.DiningHall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.Building = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mdining.DiningHall.Building, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.Building.displayName = 'proto.mdining.DiningHall.Building';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.Building.Address = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mdining.DiningHall.Building.Address, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.Building.Address.displayName = 'proto.mdining.DiningHall.Building.Address';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.Capacity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mdining.DiningHall.Capacity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.Capacity.displayName = 'proto.mdining.DiningHall.Capacity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.DayHour = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.DiningHall.DayHour.repeatedFields_, null);
};
goog.inherits(proto.mdining.DiningHall.DayHour, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.DayHour.displayName = 'proto.mdining.DiningHall.DayHour';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.DayEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mdining.DiningHall.DayEvent.repeatedFields_, null);
};
goog.inherits(proto.mdining.DiningHall.DayEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.DayEvent.displayName = 'proto.mdining.DiningHall.DayEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mdining.DiningHall.DayEvent.CalendarEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mdining.DiningHall.DayEvent.CalendarEvent.displayName = 'proto.mdining.DiningHall.DayEvent.CalendarEvent';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.DiningHalls.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHalls.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHalls.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHalls} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHalls.toObject = function(includeInstance, msg) {
  var f, obj = {
    dininghallsList: jspb.Message.toObjectList(msg.getDininghallsList(),
    proto.mdining.DiningHall.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHalls}
 */
proto.mdining.DiningHalls.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHalls;
  return proto.mdining.DiningHalls.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHalls} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHalls}
 */
proto.mdining.DiningHalls.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mdining.DiningHall;
      reader.readMessage(value,proto.mdining.DiningHall.deserializeBinaryFromReader);
      msg.addDininghalls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHalls.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHalls.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHalls} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHalls.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDininghallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.mdining.DiningHall.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DiningHall diningHalls = 1;
 * @return {!Array<!proto.mdining.DiningHall>}
 */
proto.mdining.DiningHalls.prototype.getDininghallsList = function() {
  return /** @type{!Array<!proto.mdining.DiningHall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mdining.DiningHall, 1));
};


/**
 * @param {!Array<!proto.mdining.DiningHall>} value
 * @return {!proto.mdining.DiningHalls} returns this
*/
proto.mdining.DiningHalls.prototype.setDininghallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.mdining.DiningHall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.DiningHall}
 */
proto.mdining.DiningHalls.prototype.addDininghalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.mdining.DiningHall, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.DiningHalls} returns this
 */
proto.mdining.DiningHalls.prototype.clearDininghallsList = function() {
  return this.setDininghallsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.DiningHall.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    campus: jspb.Message.getFieldWithDefault(msg, 2, ""),
    building: (f = msg.getBuilding()) && proto.mdining.DiningHall.Building.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    capacity: (f = msg.getCapacity()) && proto.mdining.DiningHall.Capacity.toObject(includeInstance, f),
    sortposition: jspb.Message.getFieldWithDefault(msg, 6, 0),
    dayhoursList: jspb.Message.toObjectList(msg.getDayhoursList(),
    proto.mdining.DiningHall.DayHour.toObject, includeInstance),
    dayeventsList: jspb.Message.toObjectList(msg.getDayeventsList(),
    proto.mdining.DiningHall.DayEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall}
 */
proto.mdining.DiningHall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall;
  return proto.mdining.DiningHall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall}
 */
proto.mdining.DiningHall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCampus(value);
      break;
    case 3:
      var value = new proto.mdining.DiningHall.Building;
      reader.readMessage(value,proto.mdining.DiningHall.Building.deserializeBinaryFromReader);
      msg.setBuilding(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = new proto.mdining.DiningHall.Capacity;
      reader.readMessage(value,proto.mdining.DiningHall.Capacity.deserializeBinaryFromReader);
      msg.setCapacity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSortposition(value);
      break;
    case 7:
      var value = new proto.mdining.DiningHall.DayHour;
      reader.readMessage(value,proto.mdining.DiningHall.DayHour.deserializeBinaryFromReader);
      msg.addDayhours(value);
      break;
    case 8:
      var value = new proto.mdining.DiningHall.DayEvent;
      reader.readMessage(value,proto.mdining.DiningHall.DayEvent.deserializeBinaryFromReader);
      msg.addDayevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCampus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBuilding();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mdining.DiningHall.Building.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCapacity();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.mdining.DiningHall.Capacity.serializeBinaryToWriter
    );
  }
  f = message.getSortposition();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDayhoursList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.mdining.DiningHall.DayHour.serializeBinaryToWriter
    );
  }
  f = message.getDayeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.mdining.DiningHall.DayEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.Building.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.Building.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.Building} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Building.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: (f = msg.getAddress()) && proto.mdining.DiningHall.Building.Address.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.Building}
 */
proto.mdining.DiningHall.Building.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.Building;
  return proto.mdining.DiningHall.Building.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.Building} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.Building}
 */
proto.mdining.DiningHall.Building.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.mdining.DiningHall.Building.Address;
      reader.readMessage(value,proto.mdining.DiningHall.Building.Address.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.Building.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.Building.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.Building} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Building.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mdining.DiningHall.Building.Address.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.Building.Address.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.Building.Address.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.Building.Address} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Building.Address.toObject = function(includeInstance, msg) {
  var f, obj = {
    city: jspb.Message.getFieldWithDefault(msg, 1, ""),
    postalcode: jspb.Message.getFieldWithDefault(msg, 2, 0),
    state: jspb.Message.getFieldWithDefault(msg, 3, ""),
    street1: jspb.Message.getFieldWithDefault(msg, 4, ""),
    street2: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.Building.Address}
 */
proto.mdining.DiningHall.Building.Address.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.Building.Address;
  return proto.mdining.DiningHall.Building.Address.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.Building.Address} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.Building.Address}
 */
proto.mdining.DiningHall.Building.Address.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPostalcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet1(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.Building.Address.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.Building.Address.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.Building.Address} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Building.Address.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPostalcode();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStreet1();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStreet2();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string city = 1;
 * @return {string}
 */
proto.mdining.DiningHall.Building.Address.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.Building.Address} returns this
 */
proto.mdining.DiningHall.Building.Address.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 postalCode = 2;
 * @return {number}
 */
proto.mdining.DiningHall.Building.Address.prototype.getPostalcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mdining.DiningHall.Building.Address} returns this
 */
proto.mdining.DiningHall.Building.Address.prototype.setPostalcode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string state = 3;
 * @return {string}
 */
proto.mdining.DiningHall.Building.Address.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.Building.Address} returns this
 */
proto.mdining.DiningHall.Building.Address.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string street1 = 4;
 * @return {string}
 */
proto.mdining.DiningHall.Building.Address.prototype.getStreet1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.Building.Address} returns this
 */
proto.mdining.DiningHall.Building.Address.prototype.setStreet1 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string street2 = 5;
 * @return {string}
 */
proto.mdining.DiningHall.Building.Address.prototype.getStreet2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.Building.Address} returns this
 */
proto.mdining.DiningHall.Building.Address.prototype.setStreet2 = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mdining.DiningHall.Building.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.Building} returns this
 */
proto.mdining.DiningHall.Building.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Address address = 2;
 * @return {?proto.mdining.DiningHall.Building.Address}
 */
proto.mdining.DiningHall.Building.prototype.getAddress = function() {
  return /** @type{?proto.mdining.DiningHall.Building.Address} */ (
    jspb.Message.getWrapperField(this, proto.mdining.DiningHall.Building.Address, 2));
};


/**
 * @param {?proto.mdining.DiningHall.Building.Address|undefined} value
 * @return {!proto.mdining.DiningHall.Building} returns this
*/
proto.mdining.DiningHall.Building.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mdining.DiningHall.Building} returns this
 */
proto.mdining.DiningHall.Building.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mdining.DiningHall.Building.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.Capacity.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.Capacity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.Capacity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Capacity.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentoccupancy: jspb.Message.getFieldWithDefault(msg, 1, 0),
    currentoccupancyratio: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalcapacity: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.Capacity}
 */
proto.mdining.DiningHall.Capacity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.Capacity;
  return proto.mdining.DiningHall.Capacity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.Capacity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.Capacity}
 */
proto.mdining.DiningHall.Capacity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentoccupancy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentoccupancyratio(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalcapacity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.Capacity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.Capacity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.Capacity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.Capacity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentoccupancy();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCurrentoccupancyratio();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalcapacity();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 currentOccupancy = 1;
 * @return {number}
 */
proto.mdining.DiningHall.Capacity.prototype.getCurrentoccupancy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.mdining.DiningHall.Capacity} returns this
 */
proto.mdining.DiningHall.Capacity.prototype.setCurrentoccupancy = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 currentOccupancyRatio = 2;
 * @return {number}
 */
proto.mdining.DiningHall.Capacity.prototype.getCurrentoccupancyratio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.mdining.DiningHall.Capacity} returns this
 */
proto.mdining.DiningHall.Capacity.prototype.setCurrentoccupancyratio = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 totalCapacity = 3;
 * @return {number}
 */
proto.mdining.DiningHall.Capacity.prototype.getTotalcapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.mdining.DiningHall.Capacity} returns this
 */
proto.mdining.DiningHall.Capacity.prototype.setTotalcapacity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.DiningHall.DayHour.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.DayHour.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.DayHour.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.DayHour} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayHour.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hourList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.DayHour}
 */
proto.mdining.DiningHall.DayHour.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.DayHour;
  return proto.mdining.DiningHall.DayHour.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.DayHour} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.DayHour}
 */
proto.mdining.DiningHall.DayHour.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addHour(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.DayHour.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.DayHour.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.DayHour} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayHour.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHourList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.mdining.DiningHall.DayHour.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayHour} returns this
 */
proto.mdining.DiningHall.DayHour.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string hour = 2;
 * @return {!Array<string>}
 */
proto.mdining.DiningHall.DayHour.prototype.getHourList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.mdining.DiningHall.DayHour} returns this
 */
proto.mdining.DiningHall.DayHour.prototype.setHourList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.mdining.DiningHall.DayHour} returns this
 */
proto.mdining.DiningHall.DayHour.prototype.addHour = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.DiningHall.DayHour} returns this
 */
proto.mdining.DiningHall.DayHour.prototype.clearHourList = function() {
  return this.setHourList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mdining.DiningHall.DayEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.DayEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.DayEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.DayEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    calendareventList: jspb.Message.toObjectList(msg.getCalendareventList(),
    proto.mdining.DiningHall.DayEvent.CalendarEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.DayEvent}
 */
proto.mdining.DiningHall.DayEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.DayEvent;
  return proto.mdining.DiningHall.DayEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.DayEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.DayEvent}
 */
proto.mdining.DiningHall.DayEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.mdining.DiningHall.DayEvent.CalendarEvent;
      reader.readMessage(value,proto.mdining.DiningHall.DayEvent.CalendarEvent.deserializeBinaryFromReader);
      msg.addCalendarevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.DayEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.DayEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.DayEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCalendareventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.mdining.DiningHall.DayEvent.CalendarEvent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.mdining.DiningHall.DayEvent.CalendarEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mdining.DiningHall.DayEvent.CalendarEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventdayend: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eventdaystart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventdescription: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventmaplink: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventtimestart: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventtimeend: jspb.Message.getFieldWithDefault(msg, 6, ""),
    eventtitle: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mdining.DiningHall.DayEvent.CalendarEvent;
  return proto.mdining.DiningHall.DayEvent.CalendarEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mdining.DiningHall.DayEvent.CalendarEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventdayend(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventdaystart(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventdescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventmaplink(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtimestart(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtimeend(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mdining.DiningHall.DayEvent.CalendarEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mdining.DiningHall.DayEvent.CalendarEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventdayend();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEventdaystart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventdescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventmaplink();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventtimestart();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventtimeend();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEventtitle();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string eventDayEnd = 1;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventdayend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventdayend = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eventDayStart = 2;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventdaystart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventdaystart = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string eventDescription = 3;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventdescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventdescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string eventMapLink = 4;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventmaplink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventmaplink = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string eventTimeStart = 5;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventtimestart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventtimestart = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string eventTimeEnd = 6;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventtimeend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventtimeend = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string eventTitle = 7;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.getEventtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.CalendarEvent.prototype.setEventtitle = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.mdining.DiningHall.DayEvent.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall.DayEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CalendarEvent calendarEvent = 2;
 * @return {!Array<!proto.mdining.DiningHall.DayEvent.CalendarEvent>}
 */
proto.mdining.DiningHall.DayEvent.prototype.getCalendareventList = function() {
  return /** @type{!Array<!proto.mdining.DiningHall.DayEvent.CalendarEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mdining.DiningHall.DayEvent.CalendarEvent, 2));
};


/**
 * @param {!Array<!proto.mdining.DiningHall.DayEvent.CalendarEvent>} value
 * @return {!proto.mdining.DiningHall.DayEvent} returns this
*/
proto.mdining.DiningHall.DayEvent.prototype.setCalendareventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.mdining.DiningHall.DayEvent.CalendarEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.DiningHall.DayEvent.CalendarEvent}
 */
proto.mdining.DiningHall.DayEvent.prototype.addCalendarevent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.mdining.DiningHall.DayEvent.CalendarEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.DiningHall.DayEvent} returns this
 */
proto.mdining.DiningHall.DayEvent.prototype.clearCalendareventList = function() {
  return this.setCalendareventList([]);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.mdining.DiningHall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string campus = 2;
 * @return {string}
 */
proto.mdining.DiningHall.prototype.getCampus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.setCampus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Building building = 3;
 * @return {?proto.mdining.DiningHall.Building}
 */
proto.mdining.DiningHall.prototype.getBuilding = function() {
  return /** @type{?proto.mdining.DiningHall.Building} */ (
    jspb.Message.getWrapperField(this, proto.mdining.DiningHall.Building, 3));
};


/**
 * @param {?proto.mdining.DiningHall.Building|undefined} value
 * @return {!proto.mdining.DiningHall} returns this
*/
proto.mdining.DiningHall.prototype.setBuilding = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.clearBuilding = function() {
  return this.setBuilding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mdining.DiningHall.prototype.hasBuilding = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.mdining.DiningHall.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Capacity capacity = 5;
 * @return {?proto.mdining.DiningHall.Capacity}
 */
proto.mdining.DiningHall.prototype.getCapacity = function() {
  return /** @type{?proto.mdining.DiningHall.Capacity} */ (
    jspb.Message.getWrapperField(this, proto.mdining.DiningHall.Capacity, 5));
};


/**
 * @param {?proto.mdining.DiningHall.Capacity|undefined} value
 * @return {!proto.mdining.DiningHall} returns this
*/
proto.mdining.DiningHall.prototype.setCapacity = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.clearCapacity = function() {
  return this.setCapacity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mdining.DiningHall.prototype.hasCapacity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 sortPosition = 6;
 * @return {number}
 */
proto.mdining.DiningHall.prototype.getSortposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.setSortposition = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated DayHour dayHours = 7;
 * @return {!Array<!proto.mdining.DiningHall.DayHour>}
 */
proto.mdining.DiningHall.prototype.getDayhoursList = function() {
  return /** @type{!Array<!proto.mdining.DiningHall.DayHour>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mdining.DiningHall.DayHour, 7));
};


/**
 * @param {!Array<!proto.mdining.DiningHall.DayHour>} value
 * @return {!proto.mdining.DiningHall} returns this
*/
proto.mdining.DiningHall.prototype.setDayhoursList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.mdining.DiningHall.DayHour=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.DiningHall.DayHour}
 */
proto.mdining.DiningHall.prototype.addDayhours = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.mdining.DiningHall.DayHour, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.clearDayhoursList = function() {
  return this.setDayhoursList([]);
};


/**
 * repeated DayEvent dayEvents = 8;
 * @return {!Array<!proto.mdining.DiningHall.DayEvent>}
 */
proto.mdining.DiningHall.prototype.getDayeventsList = function() {
  return /** @type{!Array<!proto.mdining.DiningHall.DayEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.mdining.DiningHall.DayEvent, 8));
};


/**
 * @param {!Array<!proto.mdining.DiningHall.DayEvent>} value
 * @return {!proto.mdining.DiningHall} returns this
*/
proto.mdining.DiningHall.prototype.setDayeventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.mdining.DiningHall.DayEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.mdining.DiningHall.DayEvent}
 */
proto.mdining.DiningHall.prototype.addDayevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.mdining.DiningHall.DayEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.mdining.DiningHall} returns this
 */
proto.mdining.DiningHall.prototype.clearDayeventsList = function() {
  return this.setDayeventsList([]);
};


goog.object.extend(exports, proto.mdining);
